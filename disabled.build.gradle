// File: build.gradle, created on 2013-09-24 by mg

import org.apache.tools.ant.filters.*

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp' // for what?
apply plugin: 'maven' // for what?
apply plugin: 'war'
apply plugin: 'jetty'

buildDir = 'target'

project.ext.slf4j_version = '1.7.4'

if (hasProperty("dev") || !hasProperty("production")) {
    println "Development environment"
    project.ext['db.driverClassName'] = 'org.hsqldb.jdbc.JDBCDriver'
    project.ext['db.url'] = 'jdbc:hsqldb:hsql://localhost/tododont'
    project.ext['db.username'] = 'SA'
    project.ext['db.password'] = ''
    project.ext['smtp.hostname'] = 'localhost'
    project.ext['app.mail.from'] = 'customerservice@tododont.nowhere.tld'
    project.ext['web.app.base.uri'] = 'http://localhost:8080/tododont/'    
    project.dependencies {
        runtime 'org.hsqldb:hsqldb:2.2.9'
    }
} else if (hasProperty("production")) {
    println "Production environment"
    // TODO production profile with settings for specific DB and deployment
}

repositories {
    mavenCentral()
}

// TODO provide constants for versions of [springVersion, slf4jVersion, gwtVersion]

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {

    // ### Logging

    compile 'org.slf4j:slf4j-api:1.7.4'
    compile 'org.slf4j:jcl-over-slf4j:1.7.4'
    runtime 'ch.qos.logback:logback-classic:1.0.10'

    // ### Spring

    compile 'org.springframework:spring-context:3.2.2.RELEASE'
    compile 'org.springframework:spring-context-support:3.2.2.RELEASE' // for spring email support
    compile 'org.springframework:spring-core:3.2.2.RELEASE'
    compile 'org.springframework:spring-jdbc:3.2.2.RELEASE'
    compile 'org.springframework:spring-tx:3.2.2.RELEASE'
    compile 'org.springframework:spring-web:3.2.2.RELEASE'
    compile 'org.springframework:spring-webmvc:3.2.2.RELEASE'

    // ### Spring test support

    testCompile 'org.springframework:spring-test:3.2.2.RELEASE'

    // ### Spring support

    runtime 'cglib:cglib:2.2.2' // Required for autoproxy support of classes without interfaces
    runtime 'javax.mail:mail:1.4.5' // General mail support

    // ### Spring Security

    compile 'org.springframework.security:spring-security-core:3.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-web:3.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-taglibs:3.1.3.RELEASE'
    providedCompile 'javax.annotation:jsr250-api:1.0' // JSR-250 for @RolesAllowed annotations

    // ### Common java web stuff

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'javax.servlet:jstl:1.2' // JSTL is not included in tomcat or jetty

    // ### Validation

    compile ('javax.validation:validation-api:1.0.0.GA') {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }
    runtime 'org.hibernate:hibernate-validator:4.3.1.Final'

    // ### Database connection pool

    runtime 'c3p0:c3p0:0.9.1.2'

    // ### Google collections

    compile 'com.google.guava:guava:14.0.1'

    // ### GWT

    runtime 'com.google.gwt:gwt-servlet:2.5.1'
    providedCompile 'com.google.gwt:gwt-user:2.5.1'
    providedCompile 'com.google.gwt:gwt-dev:2.5.1'

    // Test
    testCompile group: 'junit', name: 'junit', version: '4+'    
}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}

def printProjectProperty(key) {
    '''Prints the given project property.'''
    println "Property '" + key + "': '${project.property(key)}"
}

task printProjectProperties << {
    printProjectProperty 'slf4j_version'
    printProjectProperty 'db.driverClassName'
    printProjectProperty 'db.url'
    printProjectProperty 'db.username'
    printProjectProperty 'db.password'
    printProjectProperty 'smtp.hostname'
    printProjectProperty 'app.mail.from'
    printProjectProperty 'web.app.base.uri'
}

processResources {
    filter ReplaceTokens, tokens: [
            "db.driverClassName": project.property("db.driverClassName"),
            "db.url": project.property("db.url"),
            "db.username": project.property("db.username"),
            "db.password": project.property("db.password"),
            "smtp.hostname": project.property("smtp.hostname"),
            "app.mail.from": project.property("app.mail.from"),
            "web.app.base.uri": project.property("web.app.base.uri")
    ]
}

task createDirs << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()
}

task initProject << {
    File oldSource = file('./src')
    File tmpSource = file('./tmp')
    tmpSource.mkdirs()

    oldSource.listFiles().each { File f -> f.renameTo new File(tmpSource, f.name )}

    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()

    File newSource = file(sourceSets.main.java.srcDirs.iterator().next())

    tmpSource.listFiles().each {File f -> f.renameTo new File(newSource, f.name)}

    tmpSource.delete()
}

task compileGwt (dependsOn: classes, type: JavaExec) {
    ext.buildDir = "${project.buildDir}/gwt/gwt"
    ext.extraDir = "${project.buildDir}/extra"

    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir buildDir

    // Workaround for incremental build (GRADLE-1483)
    //outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()

    doFirst {
        file(buildDir).mkdirs()
        //classpath.each { println it.name}
        println "GWT compiler war directory " + buildDir
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath { [
        sourceSets.main.java.srcDirs,           // Java source
        sourceSets.main.output.resourcesDir,    // Generated resources
        sourceSets.main.output.classesDir,      // Generated classes
        sourceSets.main.compileClasspath,       // Deps
    ] }

    args = [
        'org.antbear.gwt.first.first', // Your GWT module
        '-war', buildDir,
        '-logLevel', 'INFO',
        '-localWorkers', '2',
        '-compileReport',
        '-extra', extraDir,
        // '-draftCompile' // Speeds up compile with 25%
    ]

    maxHeapSize = '256M'
}

war.dependsOn compileGwt

war {
    println "Including gwt stuff " + compileGwt.buildDir
    from compileGwt.buildDir
}

war.doLast {
    ant.unzip(src: war.archivePath, dest: "./war")
}

task wrapper (type: Wrapper) {
    gradleVersion = '1.8'
}

task runHsqldb(type: JavaExec) {
    main = 'org.hsqldb.server.Server'
    classpath = configurations.runtime
    args = ['--database.0', 'file:tododont', '--dbname.0', 'tododont']
}
